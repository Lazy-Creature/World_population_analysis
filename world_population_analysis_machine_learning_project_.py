# -*- coding: utf-8 -*-
"""World Population Analysis Machine Learning Project .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WeHF5VVT3rTQtFsPjPm0Oo7iuDw57biR

# **Project Name: World Population Analysis**

Contribution - Dinesh Halder

# **Project Overview**

* This project aims to analyze global population trends using historical demographic data and forecast future growth patterns.
* we will explore key factors influencing population changes by using machine learning.
* identifing significant trends, and develop predictive models to estimate future population dynamics.

# **Code [EDA]**

## 1.  **----*Know Your Data*----**

### **Import Library**
"""

# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from scipy.stats import pearsonr
from scipy.stats import f_oneway

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor


from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_squared_log_error, mean_absolute_percentage_error, r2_score
from sklearn.metrics import accuracy_score

"""### **Dataset Loading**"""

# Mounting google drive
from google.colab import drive
drive.mount('/content/drive')

# Link and load data set

data_set=pd.read_csv("/content/drive/MyDrive/project internship/world_population.csv",encoding = "ISO-8859-1") # # UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb0 in position 40: invalid start byte

"""### **Dataset OverView**"""

display(data_set)

# Columns names

print(data_set.columns.tolist())

"""* **Dataset Rows & Columns count**"""

num_rows, num_cols= data_set.shape
print(f"Total no. of Rows: {num_rows}")
print(f"Total no. of Columns: {num_cols}")

"""* **DataSet Information**"""

data_set.info()

"""* **Missing Values/Null Values**"""

data_set.isnull().sum()

"""* **Duplicate Value**"""

duplicate_count= data_set.duplicated().sum()

print(f"Total no. of duplicate Rows: {duplicate_count}")

# Visualizing the missing values using heat map

plt.figure(figsize=(10,6))
sns.heatmap(data_set.isnull(),cbar= False,cmap= 'coolwarm')

plt.title("Missing value - Heat Map")
plt.show()

"""### **What did we know about Data?**

1. The DataSet comprises of 234 Rows and 17 Columns.
2. No null value is present in the DataSet.
3. No duplicate value is present.
4. Four(4) attributes (CCA3, Country/Territory, Capital, Continent) are object data types and the rests are int or float data type.

## 2. ***----Understanding Variables----***
"""

# Know Columns

column_name= list(data_set.columns)

print("Columns\n")
for i in range(len(column_name)):
  print(f"{i+1}. {column_name[i]}")

# Data Set Describe

data_set.describe().T

"""Check the unique values for each variables"""

for i in data_set.columns.tolist():
  print(f"Total unique values in {i} : {data_set[i].nunique()}")

"""### **Variable Description**

1. Rank : Ranking of countries regarding population.
2. CCA3: initial alphabet of countries .
3. Country/Territory: Name of the country.
4. Capital: Defines the capital of the specific country.
5. Continent: Specifies the continent in which the country belongs to.
6. 2022 Population: Total Population of the country in 2022.
7. 2020 Population: Total Population of the country in 2020.
8. 2015 Population: Total Population of the country in 2015.
9. 2010 Population: Total Population of the country in 2010.
10. 2000 Population: Total Population of the country in 2000.
11. 1990 Population: Total Population of the country in 1990.
12. 1980 Population: Total Population of the country in 1980.
13. 1970 Population: Total Population of the country in 1970.
14. Area (kmÂ²): Area size of the Country/Territories in square kilometer.
15. Density (per kmÂ²): Population Density per square kilometer.
16. Growth Rate: Population Growth Rate by Country/Territories.
17. World Population Percentage: The population percentage by each Country/Territories.

## 3. ***----Data Wrangling----***

* We are going to change the attributes name for simploification.
* We are going to delete the CCA3 attribute.
"""

df= data_set.copy()

df=df.drop(['CCA3'],axis=1)
df.head(5)

df.rename(columns={'Area (kmÂ²)': 'area','Density (per kmÂ²)': 'density', 'World Population Percentage':'population%', '2022 Population':'2022','2020 Population':'2020','2015 Population':'2015','2010 Population':'2010','2000 Population':'2000','1990 Population':'1990','1980 Population':'1980','1970 Population':'1970','Country/Territory':'country'}, inplace=True)

df.head(2)

"""## 4. ***----Data Vizualization, Storytelling & Experimenting with charts : Understand the relationships between variables----***

### 1. **Correlation Heatmap**
"""

# Correlation Heatmap visualization code

selected_cols= ['area', 'density', 'Growth Rate', 'population%']
corr_matrix= df[selected_cols].corr()

plt.figure(figsize=(10,6))
sns.heatmap(corr_matrix,annot= True,cmap="coolwarm",fmt= ".2f",linewidths= 0.5)
plt.title("Correlation Heatmap")
plt.show()

corr_matrix.T

"""**Insight(s):**

* There is a positive correlation between 'Area' and 'World Population Percentage' (0.45)

### 2. **Pair Plot**
"""

# Pair plot

sns.pairplot(df[selected_cols])
plt.suptitle("Pair plot",y= 1.02)
plt.show()

"""Insight(s):


*   Shows most countries have a small area, while a few have very large areas.
*   Most countries have a low population density, with a few having very high densities.
* Most countries have a growth rate around 1.00, indicating stable population sizes.
* Most countries contribute a very small percentage to the world population, with a few contributing significantly more.

### 3. **Box Plot**
"""

# Create box plots for each variable
plt.figure(figsize=(15, 10))
sns.set(style="whitegrid")

for i, variable in enumerate(selected_cols, 1):
    plt.subplot(4, 2, i)
    sns.boxplot(x=df[variable], color='skyblue')
    plt.title(f'Box Plot: {variable}')

plt.tight_layout()
plt.show()

"""**Insight(s):**


1. Area (km²): The majority of countries have small areas, with several outliers having very large areas. This indicates a wide variation in country sizes.

2. Density (per km²): Most countries have low population density, with a few countries having very high densities. This suggests that while most countries are sparsely populated, a few are densely populated.

3. Growth Rate: The growth rate for most countries centers around 1.0, indicating stable population sizes. There are a few outliers with significantly higher or lower growth rates, showing that some countries are experiencing rapid population changes.

4. World Population Percentage: The percentage of the world population is mostly concentrated at the lower end, with one significant outlier at around 17.5%. This highlights that while most countries contribute a small percentage to the world population, a few have a much larger share.

### 4. **Population trend over the year**
"""

def top5_population(df):
  # Selection of top 5 most populous countries in 2022
  top_5= df.nlargest(5, "2022")

  # Columns for years
  years= ["1970", "1980", "1990", "2000", "2010", "2015", "2020", "2022"]

  # Convert population columns to numeric values
  top_5[years]= top_5[years].apply(pd.to_numeric, errors= 'coerce')
  # Transform data for seaborn
  top_5_melted = top_5.melt(id_vars=['country'], value_vars=years, var_name='Year', value_name='Population')
  top_5_melted['Year']= top_5_melted['Year'].str.extract('(\d+)').astype(int)

  # Plot the data using seaborn
  plt.figure(figsize=(12, 6))

  sns.lineplot(data=top_5_melted, x='Year', y='Population', hue='country', marker='o')

  plt.xlabel("Year")
  plt.ylabel("Population")
  plt.title("Top 5 Most Populous Countries Over Time")
  plt.xticks(rotation=45)
  plt.legend(title='Country')
  plt.grid(True)
  plt.show()

top5_population(df)

top5_populated= df.nlargest(5, '2022')[['country', '2022']]
print(top5_populated)

"""**Insight(s):**

**1. India & China Are Nearly Equal in Population (2022):**
* China (1.42B) and India (1.41B) together account for over 35% of the world's population.
* India is expected to surpass China as the most populous country soon due to its higher growth rate.

**2. The U.S. Is the Most Populous Western Country:**
* The United States, with 338 million, is the third most populous country.
However, its population is much lower than India and China.

**3. Indonesia:**
* Indonesia has 275 million people, making it the 4th most populous nation.

**4. Pakistan’s Rapid Growth:**
* Pakistan’s 235 million population places it 5th.

**5. Population Disparity:**
* The difference between the 2nd (India) and 3rd (USA) ranked country is over 1 billion people!
* This shows the massive population concentration in Asia compared to the rest of the world.

### 5. **Growth rate over the year**
"""

top5_growth= df.nlargest(5, "Growth Rate")
pattern_growth= top5_growth[["country", "Growth Rate"]].reset_index(drop= True)
print(pattern_growth)

# Plotting
plt.figure(figsize=(10, 6))
sns.barplot(x="Growth Rate", y="country", data=pattern_growth, palette="viridis")

plt.xlabel("Growth Rate (%)")
plt.ylabel("Country/Territory")
plt.title("Top 5 Countries/Territories by Growth Rate")
plt.grid(axis="x", linestyle="--", alpha=0.6)
plt.show()

"""**Insight(s):**

Moldova & Poland Lead in Growth:
* Unlike China & India, which have stabilizing populations, Moldova (1.0691) and Poland (1.0404) show notable growth.
* Followed by Niger, Syria, Slovakia.

### 6. **Area Analysis (Country)**
"""

top10_area= df.nlargest(10, "area")
pattern_area= top10_area[["country", "area"]].reset_index(drop= True)
print(pattern_area)

plt.figure(figsize=(12, 8))
sns.barplot(x="country", y="area", data= pattern_area, palette="viridis")
plt.xlabel("Country")
plt.ylabel("Area")
plt.title("Top 10 country with area")
plt.show()

"""**Insight(s)**

* Area wise, russia is the largest country followed by Canada, China, USA, Brazil, Australia, and India.

### 7. **Population Density (Country)**
"""

top5_density= df.nlargest(5, "density")
pattern_density= top5_density[["country", "density"]].reset_index(drop= True)
print(pattern_density)

least5_density= df.nsmallest(5, "density")
pattern_least_density= least5_density[["country", "density"]].reset_index(drop= True)
print(pattern_least_density)

# Plot for top 10 countries with the highest density
plt.figure(figsize=(10, 6))
sns.barplot(x='country', y='density', data=pattern_density, palette='viridis')
plt.title('Top 10 Countries with Highest Population Density', fontsize=14, fontweight='bold')
plt.xlabel('Country/Territory', fontsize=12)
plt.ylabel('Density (per km²)', fontsize=12)
plt.xticks(rotation=45, ha='right')  # Rotate labels for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Add gridlines
plt.show()

# Plot for top 10 countries with the lowest density
plt.figure(figsize=(10, 6))
sns.barplot(x='country', y='density', data=pattern_least_density, palette='viridis')
plt.title('Top 10 Countries with Lowest Population Density', fontsize=14, fontweight='bold')
plt.xlabel('Country/Territory', fontsize=12)
plt.ylabel('Density (per km²)', fontsize=12)
plt.xticks(rotation=45, ha='right')  # Rotate labels for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Add gridlines
plt.show()

"""**Insight(s)**

1. Macau & Monaco Lead in Density – Extremely compact, with 23,172/km² (Macau) & 18,234/km² (Monaco).
2. Singapore & Hong Kong Are High-Density Urban Hubs – Limited land, dense populations.
3. Gibraltar Is Similarly Packed – Small land area leads to 5,441/km² density.




4. Greenland & Falklands – Extremely sparse (0.0261/km², 0.3105/km²).
5. Western Sahara & Mongolia – Vast lands, but low density (~2/km²).
Namibia – 3.1/km².

### 8. **Population growth over decades**
"""

df['Population Growth (2000-2022)']= df['2022']-df['2000']
plt.figure(figsize=(10, 5))
sns.scatterplot(x='2022', y='Population Growth (2000-2022)', data=df)
plt.xscale('log')
plt.title('Population Growth (2000-2022) vs 2022 Population')
plt.xlabel('2022 Population (log scale)')
plt.ylabel('Growth (2000-2022)')
plt.show()

"""**Insight(s):**

**1. Relationship between Population Growth and Population Size:**

* Generally, countries with larger populations tend to have a wide range of growth rates. This indicates that population size alone isn't a strong predictor of growth rate.

* There are some outliers with very high growth rates, indicating rapid population increases despite having smaller populations.

**2. Clusters of Countries:**

* The plot shows clusters of countries with similar population sizes and growth rates. This can indicate regional trends or similarities in demographic behavior.

* For example, countries with moderate population sizes and moderate growth rates are densely clustered, suggesting a common trend among such countries.

**3. Outliers:**

* Some countries have significantly higher growth rates compared to others. These outliers could represent countries with unique demographic policies, economic conditions, or other factors driving rapid population growth.

* Similarly, some countries with large populations show varying growth rates, indicating diverse population dynamics.

### 9. **Population density analysis (Continent)**
"""

plt.figure(figsize=(10, 5))
sns.boxplot(x='Continent', y='density', data=df)
plt.yscale('log')
plt.title('Population Density by Continent')
plt.xticks(rotation=45)
plt.show()

"""**Insight(s):**

**1. Population Distribution:**

* Most countries fall in the lower range of population sizes, with a few notable outliers having significantly larger populations.

* The logarithmic scale helps visualize a wide range of population sizes, revealing these differences clearly.

**2. Population Growth:**

* Most countries exhibit moderate population growth over the 22-year period.

* There are some outliers with exceptionally high growth rates, indicating rapid population increases in these countries.

**3. Clusters of Countries:**

* The scatter plot shows clusters of countries with similar population sizes and growth rates, suggesting regional trends or similarities in demographic behavior.

**4. Outliers:**

* A few countries with very high growth rates stand apart, representing unique demographic policies, economic conditions, or other factors driving rapid growth.

* Similarly, some countries with large populations show varying growth rates, indicating diverse population dynamics.

### **10. Total population by continent in 2022**
"""

continent_population = df.groupby('Continent')['2022'].sum()
plt.figure(figsize=(8, 8))
plt.pie(continent_population, labels=continent_population.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
plt.title('Total Population by Continent in 2022')
plt.show()

"""**Insight(s):**

* Asia contributes the highest in the world population percentage.
* Africa comprises around 17.9% which is followed by Europe.
* Oceania has the lowest population among all.

# **Code [Forecasting/Time series analysis]**

## **1. Feature Engineering & Data Pre-processing**

### * There is no missing value in the data set

### **Detecting & Remove Outlier**
"""

# Drop unwanted columns
df= df.drop(["Population Growth (2000-2022)","Rank"],axis=1)

# Select only numerical columns
numeric_cols= df.select_dtypes(include=['number'])

# Set figure size
plt.figure(figsize= (15, 8))

# Create multiple boxplots
sns.boxplot(data= numeric_cols)

# Rotate x-axis labels for better readability
plt.xticks(rotation=45)

# Add title
plt.title('Boxplots of All Numerical Attributes (Detecting Outliers)')

# Show plot
plt.show()

# Create a dictionary to store the count of outliers for each column
outlier_counts= {}

# Loop through each numeric column
for column in numeric_cols:
    # Calculate Q1 and Q3
    Q1= df[column].quantile(0.25)
    Q3= df[column].quantile(0.75)

    # Calculate IQR
    IQR= Q3 - Q1

    # Define the upper and lower bounds for outliers
    lower_bound= Q1-1.5*IQR
    upper_bound= Q3+1.5*IQR

    # Identify outliers
    outliers= df[(df[column]<lower_bound)|(df[column]>upper_bound)]

    # Handle outliers (filtered dataset without outliers)
    df_no_outliers= df[~((df[column]<lower_bound)|(df[column]>upper_bound))]

    # Count and store the number of outliers
    outlier_count= outliers.shape[0]
    outlier_counts[column]= outlier_count

    # Print the number of outliers for each column
    print(f"Number of outliers in {column}: {outlier_count}")

# Display the overall count of outliers for each column
print("\nOverall Count of Outliers:")
print(outlier_counts)

print(f"Data set shape before handling outliners: {df.shape}")
print(f"Data set shape after handling outliners: {df_no_outliers.shape}")

"""### **Feature selection**"""

df_final= df_no_outliers.drop(['Capital'],axis=1)
df_final

"""## **2. Analysis**"""

years=['2022','2020','2015','2010','2000','1990','1980','1970']
df_long= df_final.melt(id_vars=['Continent','area','density','Growth Rate','population%'], value_vars=years, var_name='Year',value_name='Population')

# Ensure the year is an int
df_long['Year']= df_long['Year'].astype(int)

# Aggregate population by continent
df_continent= df_long.groupby(['Continent','Year'])['Population'].sum().reset_index()

# plot population trends for each continent
plt.figure(figsize=(10,6))
sns.lineplot(data=df_continent, x='Year',y='Population',hue='Continent',marker='o')
plt.title("Population growth trend by Continent")
plt.xlabel("Year")
plt.ylabel("Total Population")
plt.legend(title="Continent")
plt.show()

from statsmodels.tsa.arima.model import ARIMA

# Forecast future population (2030, 2040, 2050) for each continent
future_years= [2030, 2040, 2050]
forecast_results= []

for continent in df_continent['Continent'].unique():
    subset= df_continent[df_continent['Continent'] == continent].set_index('Year')

    # Fit ARIMA model (p=1, d=1, q=1)
    model= ARIMA(subset['Population'], order=(1, 1, 1))
    model_fit= model.fit()

    # Forecast for future years
    forecast= model_fit.forecast(steps=len(future_years))

    # Store results
    for year, pop in zip(future_years, forecast):
        forecast_results.append([continent, year, pop])

# Convert forecast results to DataFrame
df_forecast= pd.DataFrame(forecast_results, columns=['Continent', 'Year', 'Predicted Population'])

# Plot forecast
plt.figure(figsize=(10, 6))

# Historical data
sns.lineplot(data=df_continent, x='Year', y='Population', hue='Continent', marker='o')

# Forecasted data
sns.lineplot(data=df_forecast, x='Year', y='Predicted Population', hue='Continent', marker='s', linestyle='dashed')

plt.title("Population Growth Forecast by Continent")
plt.xlabel("Year")
plt.ylabel("Total Population")
plt.grid()
plt.legend(title="Continent")
plt.show()

df_forecast_pivot= df_forecast.pivot(index="Continent", columns="Year", values="Predicted Population")
display(df_forecast_pivot)